"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var slider_1 = require("@reach/slider");
var d3_1 = require("d3");
var utils_1 = require("./utils");
exports.RubberSlider = function (_a) {
    var _b = _a.id, id = _b === void 0 ? 'rubber-slider' : _b, name = _a.name, _c = _a.className, className = _c === void 0 ? '' : _c, _d = _a.value, value = _d === void 0 ? 0 : _d, _e = _a.onChange, onChange = _e === void 0 ? function (value) { } : _e, _f = _a.width, width = _f === void 0 ? 200 : _f, _g = _a.height, height = _g === void 0 ? 100 : _g, _h = _a.max, max = _h === void 0 ? 100 : _h, _j = _a.min, min = _j === void 0 ? 0 : _j, _k = _a.step, step = _k === void 0 ? 1 : _k, _l = _a.easeFunction, easeFunction = _l === void 0 ? d3_1.easeElastic : _l, _m = _a.easeDuration, easeDuration = _m === void 0 ? 700 : _m, _o = _a.onDragStart, onDragStart = _o === void 0 ? function (position) { } : _o, _p = _a.onDrag, onDrag = _p === void 0 ? function (position) { } : _p, _q = _a.onDragEnd, onDragEnd = _q === void 0 ? function (position) { } : _q, _r = _a.style, style = _r === void 0 ? {} : _r;
    var points = [
        [0, height / 2],
        [utils_1.getPosFromValue(value, width, min, max), height / 2],
        [width, height / 2],
    ];
    var handleDragStart = function () {
        var _a = utils_1.getEventCoords(width, height), y = _a[1];
        var value = utils_1.getValueFromPos(points[1][0], width, min, max);
        onDragStart([utils_1.getSteppedValue(value, step), utils_1.getNormalizedOffset(y, height)]);
    };
    var handleDrag = function () {
        var _a = utils_1.getEventCoords(width, height), x = _a[0], y = _a[1];
        var value = utils_1.getValueFromPos(points[1][0], width, min, max);
        d3_1.event.subject[0] = x;
        d3_1.event.subject[1] = y;
        onDrag([utils_1.getSteppedValue(value, step), utils_1.getNormalizedOffset(y, height)]);
        update();
    };
    var handleDragEnd = function () {
        var _a = utils_1.getEventCoords(width, height), y = _a[1];
        var value = utils_1.getValueFromPos(points[1][0], width, min, max);
        onDragEnd([utils_1.getSteppedValue(value, step), utils_1.getNormalizedOffset(y, height)]);
        points[1][1] = height / 2;
        update();
    };
    var draw = function () {
        var svg = d3_1.select("#" + id + "-container")
            .attr('viewBox', "0, 0, " + width + ", " + height)
            .call(d3_1.drag()
            .subject(utils_1.getDragTarget)
            .on('start', handleDragStart)
            .on('drag', handleDrag)
            .on('end', handleDragEnd));
        svg
            .append('path')
            .datum(points)
            .attr('class', 'rubber-slider-track')
            .attr('fill', 'none')
            .attr('stroke', 'black')
            .attr('stroke-width', 3)
            .call(update);
    };
    var update = function () {
        onChange(utils_1.getSteppedValue(utils_1.getValueFromPos(points[1][0], width, min, max), step));
        if (process.env.NODE_ENV === 'testing')
            return;
        var svg = d3_1.select('svg');
        svg
            .select('path')
            .transition()
            .duration(easeDuration)
            .ease(easeFunction)
            .attr('d', d3_1.line().curve(d3_1.curveCatmullRom));
        var circle = svg.selectAll('g').data([points[1]], function (d) { return d; });
        circle
            .enter()
            .append('g')
            .call(function (g) {
            g.append('circle')
                .attr('r', 20)
                .attr('stroke-width', 3)
                .attr('fill', 'none')
                .attr('class', 'rubber-slider-handle');
        })
            .merge(circle)
            .transition()
            .duration(easeDuration)
            .ease(easeFunction)
            .attr('transform', function (d) { return "translate(" + d + ")"; });
        circle.exit().remove();
    };
    var handleChange = function (value) {
        onChange(value);
        var svg = d3_1.select('svg');
        var circle = svg.selectAll('g').data([points[1]], function (d) { return d; });
        circle
            .enter()
            .append('g')
            .call(function (g) {
            g.append('circle')
                .attr('r', 20)
                .attr('stroke-width', 3)
                .attr('fill', 'none')
                .attr('class', 'rubber-slider-handle');
        })
            .merge(circle)
            .attr('transform', function (d) { return "translate(" + d + ")"; });
        circle.exit().remove();
    };
    react_1.useEffect(function () {
        draw();
        update();
    }, []);
    return (react_1.default.createElement(slider_1.SliderInput, { name: name, value: value, onChange: handleChange, min: min, max: max, step: step, className: "rubber-slider-input " + className, style: __assign(__assign({}, style), { width: width }) },
        react_1.default.createElement(slider_1.SliderTrack, { className: "rubber-slider-pseudo-track" },
            react_1.default.createElement(slider_1.SliderHandle, { className: "rubber-slider-pseudo-handle" }),
            react_1.default.createElement("svg", { id: id + "-container", className: "rubber-slider", "aria-hidden": true }))));
};
//# sourceMappingURL=rubber-slider.js.map