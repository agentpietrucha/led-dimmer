{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ulticore/reactjs/switch/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { withStyles } from '@material-ui/core/styles';\n\nfunction checkStatus() {\n  console.log('check status start...');\n  return fetch('http://192.168.1.184:80/auth?key=sawicki', {\n    method: 'GET'\n  }).then(response => response).then(resp => {\n    return resp;\n  }).catch(err => {\n    console.log('error auth: ', err);\n  });\n}\n\nfunction switchReq(token, state) {\n  return fetch(`http://192.168.1.184:80/switch/${state}?token=${token}`, {\n    method: 'GET'\n  }).then(response => response).then(resp => {\n    return resp;\n  }).catch(err => {\n    console.log('error switch: ', err);\n  });\n}\n\nfunction dimmReq(token, value) {\n  return fetch(`http://192.168.1.184:80/dimm?dimmval=${value}&token=${token}`, {\n    method: 'GET'\n  }).then(response => response).then(resp => {\n    return resp;\n  }).catch(err => {\n    console.log('dimm error: ', err);\n  });\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.connectionFree = true;\n    this.refreshAnimationFree = true;\n    this.token = undefined;\n    this.state = {\n      buttonText: 'OFF',\n      sliderCurrValue: 0,\n      connectionStatus: 'Connecting',\n      connectionStatusColor: 'gray',\n      buttonColor: 'gray',\n      disabled: true\n    };\n    this.handleSlider = this.handleSlider.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n    this.sendSliderReq = this.sendSliderReq.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.connectionFree) {\n      this.connectionFree = false;\n      checkStatus().then(data => {\n        let statusCode = data.status;\n        data.text().then(dataText => {\n          this.token = dataText.split(':')[0];\n\n          if (statusCode == 200) {\n            this.setState({\n              sliderCurrValue: parseInt(dataText.split(':')[1]),\n              connectionStatus: 'Connected',\n              connectionStatusColor: '#0bb164'\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n        });\n        this.connectionFree = true;\n      });\n    }\n  }\n\n  handleButton() {\n    if (this.connectionFree) {\n      this.connectionFree = false;\n\n      if (this.state.buttonText === 'OFF') {\n        switchReq(this.token, 'on').then(data => {\n          console.log('switch data: ', data);\n\n          if (data.status == 200) {\n            data.text().then(dataText => {\n              this.setState({\n                sliderCurrValue: parseInt(dataText),\n                buttonText: 'ON',\n                buttonColor: '#0bb164'\n              });\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n\n          this.connectionFree = true;\n        });\n      } else {\n        switchReq(this.token, 'off').then(data => {\n          console.log('switch data: ', data);\n\n          if (data.status == 200) {\n            data.text().then(dataText => {\n              this.setState({\n                buttonText: 'OFF',\n                buttonColor: '#ea1010'\n              });\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n\n          this.connectionFree = true;\n        });\n      }\n    }\n  }\n\n  handleSlider(e, value) {\n    if (this.state.sliderCurrValue != value) {\n      console.log(value);\n      this.setState({\n        sliderCurrValue: value\n      });\n    }\n  }\n\n  sendSliderReq(e, value) {\n    if (this.connectionFree) {\n      this.connectionFree = false;\n      console.log(\"sending request\");\n      dimmReq(this.token, value).then(data => {\n        if (data.status != 200) {\n          this.setState({\n            connectionStatus: 'Connection failure'\n          });\n        }\n\n        this.connectionFree = true;\n      });\n    }\n  }\n\n  tmp() {\n    console.log(\"animation end\");\n    document.querySelector('.refresh').classList.remove('refreshRotate');\n    document.querySelector('.refresh').removeEventListener('animationend', this.tmp);\n  }\n\n  handleRefresh(e) {\n    if (this.connectionFree) {\n      this.connectionFree = false;\n      checkStatus().then(data => {\n        let statusCode = data.status;\n        data.text().then(dataText => {\n          this.token = dataText.split(':')[0];\n\n          if (statusCode == 200) {\n            this.setState({\n              sliderCurrValue: parseInt(dataText.split(':')[1]),\n              connectionStatus: 'Connected',\n              connectionStatusColor: '#0bb164'\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n        });\n        this.connectionFree = true;\n      });\n    }\n\n    document.querySelector('.refresh').classList.add('refreshRotate');\n    document.querySelector('.refresh').addEventListener('animationend', this.tmp);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"refresh\",\n        onClick: this.handleRefresh,\n        children: /*#__PURE__*/_jsxDEV(RefreshIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleButton,\n        className: \"switchButton\",\n        style: {\n          background: this.state.buttonColor\n        },\n        children: this.state.buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connectionStatus\",\n        style: {\n          background: this.state.connectionStatusColor\n        },\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: this.state.connectionStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IOSSlider, {\n        disabled: this.state.buttonText === 'OFF',\n        value: this.state.sliderCurrValue,\n        min: 0,\n        max: 30,\n        step: 1,\n        onChange: this.handleSlider,\n        onChangeCommitted: this.sendSliderReq,\n        \"aria-labelledby\": \"continuous-slider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\nconst iOSBoxShadow = '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)';\nconst IOSSlider = withStyles({\n  root: {\n    color: '#3880ff',\n    height: 2,\n    padding: '15px 0'\n  },\n  thumb: {\n    height: 28,\n    width: 28,\n    backgroundColor: '#fff',\n    boxShadow: iOSBoxShadow,\n    marginTop: -14,\n    marginLeft: -14,\n    '&:focus, &:hover, &$active': {\n      boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        boxShadow: iOSBoxShadow\n      }\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 12px)',\n    top: -22,\n    '& *': {\n      background: 'transparent',\n      color: '#000'\n    }\n  },\n  track: {\n    height: 2\n  },\n  rail: {\n    height: 2,\n    opacity: 0.5,\n    backgroundColor: '#bfbfbf'\n  },\n  mark: {\n    backgroundColor: '#bfbfbf',\n    height: 8,\n    width: 1,\n    marginTop: -3\n  },\n  markActive: {\n    opacity: 1,\n    backgroundColor: 'currentColor'\n  }\n})(Slider);","map":{"version":3,"sources":["/Users/ulticore/reactjs/switch/src/App.js"],"names":["React","Slider","RefreshIcon","withStyles","checkStatus","console","log","fetch","method","then","response","resp","catch","err","switchReq","token","state","dimmReq","value","App","Component","constructor","props","connectionFree","refreshAnimationFree","undefined","buttonText","sliderCurrValue","connectionStatus","connectionStatusColor","buttonColor","disabled","handleSlider","bind","handleButton","sendSliderReq","handleRefresh","componentDidMount","data","statusCode","status","text","dataText","split","setState","parseInt","e","tmp","document","querySelector","classList","remove","removeEventListener","add","addEventListener","render","background","iOSBoxShadow","IOSSlider","root","color","height","padding","thumb","width","backgroundColor","boxShadow","marginTop","marginLeft","active","valueLabel","left","top","track","rail","opacity","mark","markActive"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { withStyles } from '@material-ui/core/styles';\n\nfunction checkStatus() {\n  console.log('check status start...');\n  return fetch('http://192.168.1.184:80/auth?key=sawicki', { method: 'GET' })\n    .then(response => response)\n    .then((resp) => {\n      return resp;\n    }).catch(err => {\n      console.log('error auth: ', err);\n    });\n}\n\nfunction switchReq(token, state) {\n  return fetch(`http://192.168.1.184:80/switch/${state}?token=${token}`, { method: 'GET' })\n    .then(response => response)\n    .then(resp => {\n      return resp;\n    }).catch(err => {\n      console.log('error switch: ', err);\n    });\n}\n\nfunction dimmReq(token, value) {\n  return fetch(`http://192.168.1.184:80/dimm?dimmval=${value}&token=${token}`, { method: 'GET' })\n    .then(response => response)\n    .then(resp => {\n      return resp;\n    }).catch(err => {\n      console.log('dimm error: ', err);\n    });\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.connectionFree = true;\n    this.refreshAnimationFree = true;\n    this.token = undefined;\n    this.state = {\n      buttonText: 'OFF',\n      sliderCurrValue: 0,\n      connectionStatus: 'Connecting',\n      connectionStatusColor: 'gray',\n      buttonColor: 'gray',\n      disabled: true,\n    }\n    this.handleSlider = this.handleSlider.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n    this.sendSliderReq = this.sendSliderReq.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n  }\n  componentDidMount() {\n    if (this.connectionFree) {\n      this.connectionFree = false;\n      checkStatus().then(data => {\n        let statusCode = data.status;\n        data.text().then(dataText => {\n          this.token = dataText.split(':')[0];\n          if (statusCode == 200) {\n            this.setState({\n              sliderCurrValue: parseInt(dataText.split(':')[1]),\n              connectionStatus: 'Connected',\n              connectionStatusColor: '#0bb164'\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n        });\n        this.connectionFree = true;\n      });\n    }\n  }\n\n  handleButton() {\n    if (this.connectionFree) {\n      this.connectionFree = false;\n      if (this.state.buttonText === 'OFF') {\n        switchReq(this.token, 'on').then(data => {\n          console.log('switch data: ', data);\n          if (data.status == 200) {\n            data.text().then(dataText => {\n              this.setState({\n                sliderCurrValue: parseInt(dataText),\n                buttonText: 'ON',\n                buttonColor: '#0bb164'\n              });\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n          this.connectionFree = true;\n        });\n      } else {\n        switchReq(this.token, 'off').then(data => {\n          console.log('switch data: ', data);\n          if (data.status == 200) {\n            data.text().then(dataText => {\n              this.setState({\n                buttonText: 'OFF',\n                buttonColor: '#ea1010'\n              });\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n          this.connectionFree = true;\n        });\n      }\n    }\n  }\n\n  handleSlider(e, value) {\n    if (this.state.sliderCurrValue != value) {\n      console.log(value)\n      this.setState({\n        sliderCurrValue: value\n      });\n    }\n  }\n  sendSliderReq(e, value) {\n    if (this.connectionFree) {\n      this.connectionFree = false;\n      console.log(\"sending request\");\n      dimmReq(this.token, value).then(data => {\n        if (data.status != 200) {\n          this.setState({\n            connectionStatus: 'Connection failure'\n          });\n        }\n        this.connectionFree = true;\n      });\n    }\n  }\n\n  tmp() {\n    console.log(\"animation end\");\n    document.querySelector('.refresh').classList.remove('refreshRotate');\n    document.querySelector('.refresh').removeEventListener('animationend', this.tmp);\n  }\n\n  handleRefresh(e) {\n\n    if (this.connectionFree) {\n      this.connectionFree = false;\n      checkStatus().then(data => {\n        let statusCode = data.status;\n        data.text().then(dataText => {\n          this.token = dataText.split(':')[0];\n          if (statusCode == 200) {\n            this.setState({\n              sliderCurrValue: parseInt(dataText.split(':')[1]),\n              connectionStatus: 'Connected',\n              connectionStatusColor: '#0bb164'\n            });\n          } else {\n            this.setState({\n              connectionStatus: 'Connection failure'\n            });\n          }\n        });\n        this.connectionFree = true;\n      });\n    }\n\n    document.querySelector('.refresh').classList.add('refreshRotate');\n    document.querySelector('.refresh').addEventListener('animationend', this.tmp);\n  }\n  render() {\n    return (\n      <div className={\"container\"}>\n        <button\n          className={\"refresh\"}\n          onClick={this.handleRefresh}>\n          <RefreshIcon\n            fontSize={\"large\"} />\n        </button>\n        <button\n          onClick={this.handleButton}\n          className=\"switchButton\"\n          style={{ background: this.state.buttonColor }}>\n          {this.state.buttonText}\n        </button>\n        <div className={\"connectionStatus\"}\n          style={{ background: this.state.connectionStatusColor }}> {/*connection status*/}\n          <span>{this.state.connectionStatus}</span>\n        </div>\n        <IOSSlider\n          disabled={this.state.buttonText === 'OFF'}\n          value={this.state.sliderCurrValue}\n          min={0}\n          max={30}\n          step={1}\n          onChange={this.handleSlider}\n          onChangeCommitted={this.sendSliderReq}\n          aria-labelledby=\"continuous-slider\" />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\nconst iOSBoxShadow = '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)';\nconst IOSSlider = withStyles({\n  root: {\n    color: '#3880ff',\n    height: 2,\n    padding: '15px 0',\n  },\n  thumb: {\n    height: 28,\n    width: 28,\n    backgroundColor: '#fff',\n    boxShadow: iOSBoxShadow,\n    marginTop: -14,\n    marginLeft: -14,\n    '&:focus, &:hover, &$active': {\n      boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        boxShadow: iOSBoxShadow,\n      },\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 12px)',\n    top: -22,\n    '& *': {\n      background: 'transparent',\n      color: '#000',\n    },\n  },\n  track: {\n    height: 2,\n  },\n  rail: {\n    height: 2,\n    opacity: 0.5,\n    backgroundColor: '#bfbfbf',\n  },\n  mark: {\n    backgroundColor: '#bfbfbf',\n    height: 8,\n    width: 1,\n    marginTop: -3,\n  },\n  markActive: {\n    opacity: 1,\n    backgroundColor: 'currentColor',\n  },\n})(Slider);"]},"metadata":{},"sourceType":"module"}